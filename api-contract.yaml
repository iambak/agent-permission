openapi: 3.0.3
info:
  title: Agent Permission API
  description: |
    API for managing user permissions to access specialized AI agents and user profile management.

    This API allows general-purpose AI agents to:
    1. Check if a user exists in the system
    2. Verify which specialized agents a user has access to
    3. Grant new permissions to users
    4. Create new users with empty permissions
    5. Manage detailed user profiles with contact information
    6. Create profiles with auto-generated user IDs

    **Base URL**: `https://kpfnbcvnfb.execute-api.us-east-1.amazonaws.com/dev/`

    **Authentication**: None required (public endpoints)

    **Rate Limits**: Standard AWS API Gateway limits apply
  version: 1.0.0
  contact:
    name: Agent Permission API
  license:
    name: MIT

servers:
  - url: https://kpfnbcvnfb.execute-api.us-east-1.amazonaws.com/dev
    description: Production API
  - url: http://localhost:3000
    description: Local development (SAM Local)

paths:
  /users/{user_id}:
    get:
      summary: Check if user exists
      description: |
        Verifies if a user exists in the permission system.

        **Use Case**: Before checking permissions, verify the user exists.

        **Agent Instructions**: Use this endpoint to validate a user_id before attempting other operations.
      parameters:
        - name: user_id
          in: path
          required: true
          description: The unique identifier for the user (case-insensitive)
          schema:
            type: string
            example: "user_123"
      responses:
        '200':
          description: User exists in the system
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UserExistsResponse'
              example:
                status: "success"
                data:
                  user_id: "user_123"
                  exists: true
                message: "User exists in the system"
        '404':
          description: User not found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
              example:
                status: "error"
                error:
                  code: "USER_NOT_FOUND"
                  message: "User was not found in the system"
                  user_id: "user_123"
        '500':
          description: Service unavailable
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'

  /users:
    post:
      summary: Create a new user
      description: |
        Creates a new user with empty permissions.

        **Use Case**: When a new user needs to be added to the system.

        **Agent Instructions**: Use this to create users before granting them permissions.
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/CreateUserRequest'
            example:
              user_id: "new_user_456"
      responses:
        '201':
          description: User created successfully
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/CreateUserResponse'
              example:
                status: "success"
                data:
                  user_id: "new_user_456"
                  permitted_agents: []
                  created_at: "2024-01-15T10:30:00Z"
                message: "User created successfully"
        '400':
          description: Invalid request (missing user_id or invalid JSON)
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        '409':
          description: User already exists
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
              example:
                status: "error"
                error:
                  code: "USER_ALREADY_EXISTS"
                  message: "User already exists in the system"
                  user_id: "existing_user"
        '500':
          description: Service unavailable
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'

  /permissions/{user_id}:
    get:
      summary: Get user's agent permissions
      description: |
        Retrieves all specialized agents that a user has permission to access.

        **Use Case**: Before invoking a specialized agent, check if the user has access.

        **Agent Instructions**:
        1. Call this endpoint with the user_id
        2. Check if the desired agent is in the `permitted_agents` array
        3. If agent is present, proceed with agent invocation
        4. If agent is not present, inform user they lack permission
      parameters:
        - name: user_id
          in: path
          required: true
          description: The unique identifier for the user (case-insensitive)
          schema:
            type: string
            example: "user_123"
      responses:
        '200':
          description: User permissions retrieved successfully
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/PermissionsResponse'
              example:
                status: "success"
                data:
                  user_id: "user_123"
                  permitted_agents: ["code-reviewer", "data-analyst", "image-generator"]
        '404':
          description: User not found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
              example:
                status: "error"
                error:
                  code: "USER_NOT_FOUND"
                  message: "User was not found in the system"
                  user_id: "unknown_user"
        '500':
          description: Service unavailable
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'

    delete:
      summary: Clear user's agent permissions
      description: |
        Clears all agent permissions for a specific user, setting their permitted_agents to an empty array.

        **Use Case**: Revoke all access for a user when they should no longer have any agent permissions.

        **Agent Instructions**:
        1. This will remove ALL permissions for the specified user
        2. The user will remain in the system but with no agent access
        3. Use this when you need to reset a user's permissions completely
      parameters:
        - name: user_id
          in: path
          required: true
          description: The unique identifier for the user (case-insensitive)
          schema:
            type: string
            example: "user_123"
      responses:
        '200':
          description: User permissions cleared successfully
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ClearPermissionsResponse'
              example:
                status: "success"
                data:
                  user_id: "user_123"
                  permitted_agents: []
                message: "All permissions cleared for user"
        '404':
          description: User not found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
              example:
                status: "error"
                error:
                  code: "USER_NOT_FOUND"
                  message: "User was not found in the system"
                  user_id: "unknown_user"
        '500':
          description: Service unavailable
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'

  /permissions/{user_id}/agents:
    post:
      summary: Grant agent permission to user
      description: |
        Adds permission for a user to access a specific specialized agent.

        **Use Case**: When a user needs access to a new specialized agent.

        **Agent Instructions**:
        1. Use this to grant users access to new agents
        2. If user doesn't exist, they will be created automatically
        3. If permission already exists, the request succeeds (idempotent)
      parameters:
        - name: user_id
          in: path
          required: true
          description: The unique identifier for the user (case-insensitive)
          schema:
            type: string
            example: "user_123"
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/AddPermissionRequest'
            example:
              agent_name: "code-reviewer"
      responses:
        '200':
          description: Permission added successfully (or already existed)
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/AddPermissionResponse'
              examples:
                permission_added:
                  summary: New permission added
                  value:
                    status: "success"
                    data:
                      user_id: "user_123"
                      agent_added: "code-reviewer"
                      permitted_agents: ["data-analyst", "code-reviewer"]
                    message: "Permission added successfully"
                permission_exists:
                  summary: Permission already exists
                  value:
                    status: "success"
                    data:
                      user_id: "user_123"
                      agent_added: "code-reviewer"
                      permitted_agents: ["code-reviewer", "data-analyst"]
                    message: "Permission already exists"
                user_created:
                  summary: New user created with permission
                  value:
                    status: "success"
                    data:
                      user_id: "new_user_789"
                      agent_added: "code-reviewer"
                      permitted_agents: ["code-reviewer"]
                    message: "User created and permission added successfully"
        '400':
          description: Invalid request (missing agent_name or invalid JSON)
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
              example:
                status: "error"
                error:
                  code: "INVALID_REQUEST"
                  message: "agent_name is required"
        '500':
          description: Service unavailable
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'

  /permissions:
    get:
      summary: Get all permissions
      description: |
        Retrieves all users and their agent permissions in the system.

        **Use Case**: Get a comprehensive overview of all user permissions for admin/management purposes.

        **Agent Instructions**:
        1. This returns ALL users and their permissions in one call
        2. Use the summary statistics to understand system usage
        3. Use this for administrative dashboards or bulk permission analysis
        4. The response includes both the detailed permissions and summary metrics
      responses:
        '200':
          description: All permissions retrieved successfully
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/AllPermissionsResponse'
              example:
                status: "success"
                data:
                  permissions:
                    user_123: ["code-reviewer", "data-analyst"]
                    user_456: ["image-generator"]
                    user_789: []
                  summary:
                    total_users: 3
                    users_with_permissions: 2
                    total_permissions: 3
        '500':
          description: Service unavailable
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'

    delete:
      summary: Clear all permissions for all users
      description: |
        Clears all agent permissions for ALL users in the system. This is a global reset operation.

        **Use Case**: System-wide permission reset or maintenance operations.

        **Agent Instructions**:
        1. This will remove ALL permissions for ALL users in the system
        2. All users will remain in the system but with no agent access
        3. Use with extreme caution - this affects every user
        4. Consider this a "nuclear option" for permission management
      responses:
        '200':
          description: All permissions cleared successfully
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ClearAllPermissionsResponse'
              example:
                status: "success"
                data:
                  users_affected: 3
                  users: ["user_123", "user_456", "user_789"]
                message: "All permissions cleared for all users"
        '500':
          description: Service unavailable
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'

  /profiles:
    get:
      summary: List all user profiles
      description: |
        Retrieves a list of all user profiles with basic information.

        **Use Case**: Get overview of all users in the system.

        **Agent Instructions**: Use this to see all available users and their basic info.
      responses:
        '200':
          description: Profiles retrieved successfully
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ProfileListResponse'
              example:
                status: "success"
                data:
                  profiles:
                    - user_id: "abhinav"
                      email: "abhinav.thunderbolt@example.com"
                      first_name: "Abhinav"
                      last_name: "Thunderbolt"
                      company: ""
                      created_at: "2025-09-15T09:00:00.000000"
                    - user_id: "quang"
                      email: "quang.stormwind@example.com"
                      first_name: "Quang"
                      last_name: "Stormwind"
                      company: ""
                      created_at: "2025-09-16T14:30:00.000000"
                  total_count: 2
        '500':
          description: Service unavailable
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'

    post:
      summary: Create user profile
      description: |
        Creates a new user profile with auto-generated user_id from first_name.

        **Use Case**: Create detailed user profiles for new users.

        **Agent Instructions**:
        1. Only first_name, last_name, and email are required
        2. user_id is automatically generated from first_name (lowercase)
        3. first_name must contain only letters, numbers, hyphens, and underscores
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/CreateProfileRequest'
            example:
              first_name: "John"
              last_name: "Doe"
              email: "john.doe@example.com"
              phone: "+1-555-0123"
              company: "Tech Corp"
              role: "Developer"
              bio: "Software engineer"
      responses:
        '201':
          description: Profile created successfully
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ProfileResponse'
              example:
                status: "success"
                data:
                  user_id: "john"
                  profile:
                    email: "john.doe@example.com"
                    first_name: "John"
                    last_name: "Doe"
                    phone: "+1-555-0123"
                    company: "Tech Corp"
                    role: "Developer"
                    bio: "Software engineer"
                    created_at: "2025-09-17T12:00:00.000000"
                    updated_at: "2025-09-17T12:00:00.000000"
                message: "Profile created successfully"
        '400':
          description: Invalid request
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        '409':
          description: Profile already exists
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        '500':
          description: Service unavailable
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'

  /profiles/{user_id}:
    get:
      summary: Get user profile
      description: |
        Retrieves detailed profile information for a specific user.

        **Use Case**: Get complete user profile details.

        **Agent Instructions**: Use this to get full user information including bio, role, etc.
      parameters:
        - name: user_id
          in: path
          required: true
          description: The unique identifier for the user (case-insensitive)
          schema:
            type: string
            example: "abhinav"
      responses:
        '200':
          description: Profile retrieved successfully
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ProfileResponse'
              example:
                status: "success"
                data:
                  user_id: "abhinav"
                  profile:
                    email: "abhinav.thunderbolt@example.com"
                    first_name: "Abhinav"
                    last_name: "Thunderbolt"
                    phone: ""
                    company: ""
                    role: "Day Trading Superhero"
                    bio: "Strikes the market like lightning with quick trades. Known for electrifying gains and shocking comebacks."
                    created_at: "2025-09-15T09:00:00.000000"
                    updated_at: "2025-09-15T09:00:00.000000"
        '404':
          description: Profile not found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
              example:
                status: "error"
                error:
                  code: "PROFILE_NOT_FOUND"
                  message: "User profile was not found"
                  user_id: "unknown_user"
        '500':
          description: Service unavailable
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'

    put:
      summary: Update user profile
      description: |
        Updates an existing user profile. All fields are optional except those being updated.

        **Use Case**: Modify existing user profile information.

        **Agent Instructions**: Send only the fields you want to update.
      parameters:
        - name: user_id
          in: path
          required: true
          description: The unique identifier for the user (case-insensitive)
          schema:
            type: string
            example: "abhinav"
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/UpdateProfileRequest'
            example:
              phone: "+1-555-9999"
              role: "Senior Trading Expert"
              bio: "Master of lightning-fast trades and market analysis."
      responses:
        '200':
          description: Profile updated successfully
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ProfileResponse'
        '400':
          description: Invalid request
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        '404':
          description: Profile not found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        '500':
          description: Service unavailable
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'

    delete:
      summary: Delete user profile
      description: |
        Deletes a user profile from the system.

        **Use Case**: Remove user profile when no longer needed.

        **Agent Instructions**: Use with caution - this permanently removes the profile.
      parameters:
        - name: user_id
          in: path
          required: true
          description: The unique identifier for the user (case-insensitive)
          schema:
            type: string
            example: "abhinav"
      responses:
        '200':
          description: Profile deleted successfully
          content:
            application/json:
              schema:
                type: object
                properties:
                  status:
                    type: string
                    enum: ["success"]
                  data:
                    type: object
                    properties:
                      user_id:
                        type: string
                  message:
                    type: string
              example:
                status: "success"
                data:
                  user_id: "abhinav"
                message: "Profile deleted successfully"
        '404':
          description: Profile not found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        '500':
          description: Service unavailable
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'

components:
  schemas:
    UserExistsResponse:
      type: object
      required:
        - status
        - data
        - message
      properties:
        status:
          type: string
          enum: ["success"]
        data:
          type: object
          required:
            - user_id
            - exists
          properties:
            user_id:
              type: string
              description: The normalized user ID (lowercase)
            exists:
              type: boolean
              enum: [true]
        message:
          type: string
          example: "User exists in the system"

    CreateUserRequest:
      type: object
      required:
        - user_id
      properties:
        user_id:
          type: string
          description: Unique identifier for the new user
          example: "new_user_456"

    CreateUserResponse:
      type: object
      required:
        - status
        - data
        - message
      properties:
        status:
          type: string
          enum: ["success"]
        data:
          type: object
          required:
            - user_id
            - permitted_agents
            - created_at
          properties:
            user_id:
              type: string
              description: The normalized user ID (lowercase)
            permitted_agents:
              type: array
              items:
                type: string
              description: Always empty for new users
              example: []
            created_at:
              type: string
              format: date-time
              description: ISO 8601 timestamp of user creation
        message:
          type: string
          example: "User created successfully"

    PermissionsResponse:
      type: object
      required:
        - status
        - data
      properties:
        status:
          type: string
          enum: ["success"]
        data:
          type: object
          required:
            - user_id
            - permitted_agents
          properties:
            user_id:
              type: string
              description: The normalized user ID (lowercase)
            permitted_agents:
              type: array
              items:
                type: string
              description: List of agent names the user can access
              example: ["code-reviewer", "data-analyst", "image-generator"]

    AddPermissionRequest:
      type: object
      required:
        - agent_name
      properties:
        agent_name:
          type: string
          description: Name of the specialized agent to grant access to
          example: "code-reviewer"

    AddPermissionResponse:
      type: object
      required:
        - status
        - data
        - message
      properties:
        status:
          type: string
          enum: ["success"]
        data:
          type: object
          required:
            - user_id
            - agent_added
            - permitted_agents
          properties:
            user_id:
              type: string
              description: The normalized user ID (lowercase)
            agent_added:
              type: string
              description: The agent that was added (or already existed)
            permitted_agents:
              type: array
              items:
                type: string
              description: Complete list of agents the user can now access
        message:
          type: string
          enum:
            - "Permission added successfully"
            - "Permission already exists"
            - "User created and permission added successfully"

    ClearPermissionsResponse:
      type: object
      required:
        - status
        - data
        - message
      properties:
        status:
          type: string
          enum: ["success"]
        data:
          type: object
          required:
            - user_id
            - permitted_agents
          properties:
            user_id:
              type: string
              description: The normalized user ID (lowercase)
            permitted_agents:
              type: array
              items:
                type: string
              description: Always empty after clearing permissions
              example: []
        message:
          type: string
          example: "All permissions cleared for user"

    AllPermissionsResponse:
      type: object
      required:
        - status
        - data
      properties:
        status:
          type: string
          enum: ["success"]
        data:
          type: object
          required:
            - permissions
            - summary
          properties:
            permissions:
              type: object
              additionalProperties:
                type: array
                items:
                  type: string
              description: Object mapping user IDs to their permitted agents
              example:
                user_123: ["code-reviewer", "data-analyst"]
                user_456: ["image-generator"]
                user_789: []
            summary:
              type: object
              required:
                - total_users
                - users_with_permissions
                - total_permissions
              properties:
                total_users:
                  type: integer
                  description: Total number of users in the system
                  example: 3
                users_with_permissions:
                  type: integer
                  description: Number of users with at least one permission
                  example: 2
                total_permissions:
                  type: integer
                  description: Total number of permissions across all users
                  example: 3

    ClearAllPermissionsResponse:
      type: object
      required:
        - status
        - data
        - message
      properties:
        status:
          type: string
          enum: ["success"]
        data:
          type: object
          required:
            - users_affected
            - users
          properties:
            users_affected:
              type: integer
              description: Number of users whose permissions were cleared
              example: 3
            users:
              type: array
              items:
                type: string
              description: List of user IDs that were affected
              example: ["user_123", "user_456", "user_789"]
        message:
          type: string
          example: "All permissions cleared for all users"

    ErrorResponse:
      type: object
      required:
        - status
        - error
      properties:
        status:
          type: string
          enum: ["error"]
        error:
          type: object
          required:
            - code
            - message
          properties:
            code:
              type: string
              enum:
                - "USER_NOT_FOUND"
                - "USER_ALREADY_EXISTS"
                - "PROFILE_NOT_FOUND"
                - "PROFILE_ALREADY_EXISTS"
                - "INVALID_REQUEST"
                - "SERVICE_UNAVAILABLE"
                - "NOT_FOUND"
              description: Machine-readable error code
            message:
              type: string
              description: Human-readable error message
            user_id:
              type: string
              description: The user ID that caused the error (when applicable)

    ProfileListResponse:
      type: object
      required:
        - status
        - data
      properties:
        status:
          type: string
          enum: ["success"]
        data:
          type: object
          required:
            - profiles
            - total_count
          properties:
            profiles:
              type: array
              items:
                $ref: '#/components/schemas/ProfileSummary'
            total_count:
              type: integer
              description: Total number of profiles

    ProfileSummary:
      type: object
      required:
        - user_id
        - email
        - first_name
        - last_name
        - company
        - created_at
      properties:
        user_id:
          type: string
        email:
          type: string
        first_name:
          type: string
        last_name:
          type: string
        company:
          type: string
        created_at:
          type: string
          format: date-time

    CreateProfileRequest:
      type: object
      required:
        - first_name
        - last_name
        - email
      properties:
        first_name:
          type: string
          description: First name (will be used to generate user_id as lowercase)
          pattern: '^[a-zA-Z0-9_-]+$'
          example: "John"
        last_name:
          type: string
          example: "Doe"
        email:
          type: string
          format: email
          example: "john.doe@example.com"
        phone:
          type: string
          example: "+1-555-0123"
        company:
          type: string
          example: "Tech Corp"
        role:
          type: string
          example: "Developer"
        bio:
          type: string
          example: "Software engineer with 5 years experience"

    UpdateProfileRequest:
      type: object
      properties:
        email:
          type: string
          format: email
        first_name:
          type: string
        last_name:
          type: string
        phone:
          type: string
        company:
          type: string
        role:
          type: string
        bio:
          type: string

    ProfileResponse:
      type: object
      required:
        - status
        - data
      properties:
        status:
          type: string
          enum: ["success"]
        data:
          type: object
          required:
            - user_id
            - profile
          properties:
            user_id:
              type: string
            profile:
              $ref: '#/components/schemas/ProfileDetails'
        message:
          type: string

    ProfileDetails:
      type: object
      required:
        - email
        - first_name
        - last_name
        - phone
        - company
        - role
        - bio
        - created_at
        - updated_at
      properties:
        email:
          type: string
          format: email
        first_name:
          type: string
        last_name:
          type: string
        phone:
          type: string
        company:
          type: string
        role:
          type: string
        bio:
          type: string
        created_at:
          type: string
          format: date-time
        updated_at:
          type: string
          format: date-time

  # Common agent names for reference
  examples:
    CommonAgentNames:
      summary: Common specialized agent names
      value:
        - "code-reviewer"
        - "data-analyst"
        - "image-generator"
        - "pdf-processor"
        - "test-runner"
        - "security-scanner"
        - "document-writer"
        - "api-tester"

# Additional documentation for AI agents
x-ai-agent-instructions: |
  ## Quick Start for AI Agents

  ### Basic Permission Check Workflow:
  1. **Check if user exists**: `GET /users/{user_id}`
  2. **Get user permissions**: `GET /permissions/{user_id}`
  3. **Verify access**: Check if desired agent is in `permitted_agents` array
  4. **Grant access if needed**: `POST /permissions/{user_id}/agents`
  5. **Get all permissions**: `GET /permissions` - Get overview of all users and their permissions
  6. **Clear user permissions**: `DELETE /permissions/{user_id}` - Remove all permissions for one user
  7. **Clear all permissions**: `DELETE /permissions` - Remove all permissions for all users (use with caution)

  ### Profile Management Workflow:
  1. **List all users**: `GET /profiles` - Get overview of all users
  2. **Get user details**: `GET /profiles/{user_id}` - Get full profile info
  3. **Create new user**: `POST /profiles` - Auto-generates user_id from first_name
  4. **Update profile**: `PUT /profiles/{user_id}` - Modify existing profile
  5. **Delete profile**: `DELETE /profiles/{user_id}` - Remove user profile

  ### Example Implementation:
  ```python
  # Check if user can access "code-reviewer" agent
  response = requests.get(f"{base_url}/permissions/{user_id}")

  if response.status_code == 200:
      data = response.json()
      if "code-reviewer" in data["data"]["permitted_agents"]:
          # User has access - proceed with agent invocation
          invoke_code_reviewer_agent()
      else:
          # User lacks permission - inform them
          return "You don't have access to the code-reviewer agent"
  elif response.status_code == 404:
      # User doesn't exist - optionally create them
      return "User not found in permission system"

  # Create a new user profile (auto-generates user_id)
  profile_response = requests.post(f"{base_url}/profiles", json={
      "first_name": "John",
      "last_name": "Doe",
      "email": "john.doe@example.com",
      "role": "Trader"
  })
  # user_id will be "john" (lowercase first_name)
  ```

  ### Error Handling:
  - Always check the `status` field in responses
  - For errors, use `error.code` for programmatic handling
  - Use `error.message` for user-friendly error messages
  - Handle 404 responses gracefully (user/profile might not exist yet)

  ### Best Practices:
  - User IDs are case-insensitive (stored as lowercase)
  - Agent names should be consistent across your system
  - Use descriptive agent names (e.g., "code-reviewer" not "cr")
  - Profile creation auto-generates user_id from first_name (lowercase)
  - first_name must contain only letters, numbers, hyphens, and underscores
  - Handle network errors and timeouts appropriately